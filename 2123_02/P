/**
 * Product
 * 
 *   A simple class framework used to demonstrate the design
 *   of Java classes.
 *   
 *   @version 20180202
 */

package osu.cse2123;

import java.util.ArrayList;

public class Product 
{
	
	// Private member variables
	private String prodName;
	private String prodCode;
	private String prodType;
	private int prodQuantity;
	private double prodPrice;
	private ArrayList<Integer> prodRatings = new ArrayList<Integer>();

	/*
	 * Product constructor
	 */
	public Product() 
	{
		
	}
	
	/*
	 * setName
	 *  @param name - new name for the product
	 */
	public void setName(String name) 
	{
		prodName = name;
	}
	
	/*
	 * getName
	 *  @return the name of the product
	 */
	public String getName() 
	{
		return prodName;
	}
	
	/*
	 * setType
	 *  @param type - the type of the product
	 */
	public void setType(String type) 
	{
		prodType = type;
	}
	
	/*
	 * getType
	 * @return - the product type
	 */
	public String getType() 
	{
		return prodType;
	}
	
	/*
	 * setPrice
	 * @param price - the price of the product
	 */
	public void setPrice(double price) 
	{
		if(price > 0)
		{
			prodPrice = price;
		}
		
		else
		{
			System.out.println("ERROR: Price cannot be less than or equal to zero; this is capitalism, not dreamworld.");
		}
		
	}
	
	/*
	 * getPrice
	 * @return the price of the product
	 */
	public double getPrice() 
	{
		return prodPrice;
	}
	
	/*
	 * setQuantity
	 * @param quantity - the number of this product in inventory
	 */
	public void setQuantity(int quantity) 
	{
		if (quantity >= 0)
		{
			prodQuantity = quantity;
		}
		
		else
		{
			System.out.println("Quantity cannot be less than zero.");
		}
	}
	
	/*
	 * getQuantity
	 * @return the number of this product in inventory
	 */
	public int getQuantity() 
	{
		return prodQuantity;
	}
	
	/*
	 * setInventoryCode
	 * @param code - the new inventory code for the product
	 */
	public void setInventoryCode(String code) 
	{
		prodCode = code;
	}
	
	/*
	 * getInventoryCode
	 * @return the inventory code of the product
	 */
	public String getInventoryCode() 
	{
		return prodCode;
	}
	
	/*
	 * addUserRating
	 * NOTE: Each individual rating is stored with the product, so you need to maintain a list
	 * of user ratings.  This method should append a new rating to the end of that list
	 * @param rating - the new rating to add to this product
	 */
	public void addUserRating(int rating) 
	{
		prodRatings.add(rating);
	}
	
	/*
	 * getUserRating
	 * 	NOTE:  See note on addUserRating above.  This method should be written to allow you
	 * 	to access an individual value from the list of user ratings 
	 * @param index - the index of the rating we want to see
	 * @return the rating indexed by the value index
	 */
	public int getUserRating(int index) 
	{
		return prodRatings.get(index);
	}
	
	/*
	 * getUserRatingCount
	 *  NOTE: See note on addUserRating above.  This method should be written to return
	 *  the total number of ratings this product has associated with it
	 * @return the number of ratings associated with this product
	 */
	public int getUserRatingCount() 
	{
		return prodRatings.size();
	}
	
	/*
	 * getAvgUserRating
	 *  NOTE: see note on addUserRating above.  This method should be written to compute
	 *  the average user rating on demand from a stored list of ratings.
	 * @return the average rating for this product as a whole integer value (use integer math)
	 */
	public int getAvgUserRating() 
	{
		int sum = 0;
		
		for (int pos = 0; pos < prodRatings.size(); ++pos)
		{
			sum = sum + prodRatings.get(pos);
		}
		
		int avg = 0;
		
		if (!(prodRatings.size() == 0))
		{
			avg = sum/prodRatings.size();
		}
		
		return avg;
	}
}
